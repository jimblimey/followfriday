REM Setup
BORDER 0: PAPER 0: INK 0: BRIGHT 1: CLS

DIM n$(20)
DIM i(20) AS UBYTE
DIM x,y,d,e,f AS BYTE
DIM c,cl,lc AS UBYTE
DIM cc,cb AS INTEGER
'POKE USR "A"+0, BIN 00010000
'POKE USR "A"+1, BIN 00001000
'POKE USR "A"+2, BIN 00011000
'POKE USR "A"+3, BIN 00111100
'POKE USR "A"+4, BIN 01000010
'POKE USR "A"+5, BIN 01111110
'POKE USR "A"+6, BIN 10000001
'POKE USR "A"+7, BIN 01111110

POKE USR "A"+0, BIN 00001000
POKE USR "A"+1, BIN 00010100
POKE USR "A"+2, BIN 00010100
POKE USR "A"+3, BIN 00101010
POKE USR "A"+4, BIN 00101010
POKE USR "A"+5, BIN 01000001
POKE USR "A"+6, BIN 01001001
POKE USR "A"+7, BIN 01111111

REM Add the people, uncomment the required GOTO to use a specific group
LET n$(1)="DaphBlake2"
LET n$(2)="CommodoreBlog"
LET n$(3)="Lord_Arse"
LET n$(4)="spectrum48k"
LET n$(5)="thatbitchbunty"
LET n$(6)="rexthedogge"
LET n$(7)="retro_gerry"
LET n$(8)="Deanydotcom"
LET n$(9)="raymierussell"
LET n$(10)="Tamaracade1"
LET n$(11)="zx81adventures"
LET n$(12)="JAMOGRAD"
LET n$(13)="stewie55uk"
LET n$(14)="mrbiffo"
LET n$(15)="rhayadercompute"
LET n$(16)="KaraTheBroken"
LET n$(17)="AfRetro"
LET n$(18)="SpectrumTinted"
LET n$(19)="GentlemanNikki"
LET n$(20)="rEtRo_sPexX"
'GOTO start
LET n$(1)="GeekMid"
LET n$(2)="iHarbonaut"
LET n$(3)="saucerbrain"
LET n$(4)="FirepowerGaming"
LET n$(5)="Segamastertim"
LET n$(6)="RussellRiker"
LET n$(7)="florinthedwarf"
LET n$(8)="_gazmarshall"
LET n$(9)="RetroManiaGT1"
LET n$(10)="tobobobo"
LET n$(11)="RetroResolution"
LET n$(12)="millytigger1"
LET n$(13)="russty_russ"
LET n$(14)="TheSplendidFox"
LET n$(15)="farrelltheferal"
LET n$(16)="BurghillGirl"
LET n$(17)="electron_greg"
LET n$(18)="zxkim811"
LET n$(19)="SpectrumNez"
LET n$(20)="80sNostalgia"
'GOTO start
LET n$(1)="LabsSkull"
LET n$(2)="BreakIntoProg"
LET n$(3)="8_16_32bit"
LET n$(4)="3wojis"
LET n$(5)="ZXDev2015"
LET n$(6)="TheRetroManCave"
LET n$(7)="SquaredSeven"
LET n$(8)="60sPsychoMods"
LET n$(9)="JonnBlanchard"
LET n$(10)="ezContents"
LET n$(11)="shadowinthevoid"
LET n$(12)="GAMETelford"
LET n$(13)="TristaBytes"
LET n$(14)="Manhydra"
LET n$(15)="shieladixon"
LET n$(16)="SJP176"
LET n$(17)="Zeus09998580"
LET n$(18)="theretrobyte"
LET n$(19)="0xC0DE6502"
LET n$(20)="Ewan"
GOTO start
REM Functions and data

SUB CentreText(s$ AS STRING, y AS UBYTE, c AS UBYTE, br AS UBYTE)
    DIM x AS UBYTE
    LET x = 16 - (LEN(s$) / 2)
    PRINT INK c; BRIGHT br; AT y,x; s$
END SUB

start:
RANDOMIZE
GOSUB pickorder

POKE 23607,(@fontdata-256)/256
POKE 23606,@fontdata-256*(@fontdata/256)

REM Loopy the people
FOR x=1 TO 8
  CLS
  putChars(6,1,20,20,@biohazard)
  paint(6,1,20,20,70)
  PAUSE 10
  GOSUB pickorder
  CLS
  FOR c=1 TO 20
    LET s$="@" + n$(i(c))
    cp:
    LET cl=(RND*6)+1
    IF cl=lc OR cl=6 THEN GOTO cp
    LET lc=cl
    CentreText(s$,c+1,cl,1)
  NEXT c
  PAUSE 3
NEXT x
BORDER 7
POKE 23606,0:POKE 23607,60
PRINT AT 0,0; BOLD 1; INK 7; BRIGHT 1;"#FF orderer by Jim Blimey"
PAPER 7: BRIGHT 0
PRINT AT 22,0; "                                "
PRINT AT 23,0;INK 0; CHR$ 144; " Don't lick strangers, 30:1    "
PAUSE 0

STOP

pickorder:
REM Pick order
FOR d=1 TO 20
    LET i(d) = 0
NEXT d
FOR d=1 TO 20
    REM Pick a number
    pn:
    LET e=INT(RND*20)+1
    REM Check to make sure the number hasn't already been used
    FOR f=1 TO 20
        IF i(f)=e THEN
           GOTO pn
        END IF
    NEXT f
    REM Plop the index in the index array
    IF i(d)=0 THEN
       LET i(d)=e
    END IF
NEXT d
RETURN

biohazard:
ASM
  defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,7,7,15,15,31,31,63,127,126,254,252,248,248,240,240,224,224,224,224,240,248,254,255,255,127,63,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,7,7,15,15,31,31,63,127,126,254,252,248,248,240,240,224,224,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,15,15,31,31,63,127,126,254,252,248,248,240,240,224,224,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,15,15,31,31,63,127,126,252,252,248,248,240,240,224,224,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,15,15,31,31,63,127,126,252,252,248,248,240,240,224,192,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,15,15,15,14,28,28,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,15,15,31,63,63,127,126,252,252,248,248,240,240,224,224,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,7,15,63,127,127,255,255,255,255,254,240,192,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,15,15,31,63,63,127,126,252,252,248,248,240,240,224,192,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,15,15,31,31,63,63,63,63,127,127,127,127,127,127,127,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,0,62,63,31,31,31,15,15,7,7,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,143,255,127,15,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,15,15,31,63,63,127,126,252,252,248,248,240,240,224,192,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,112,240,224,224,192,192,192,192,128,128,128,192,192,192,192,224,224,240,240,248,252,254,255,255,255,255,255,255,255,255,255,255,255,127,31,15,7,3,1,0,0,128,128,192,192,224,240,248,240,240,240,112,32,0,0,0,1,3,7,15,63,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,31,63,255,255,255,248,240,240,224,192,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,255,255,127,63,30,0,0,0,0,128,224,254,255,255,255,255,254,248,240,240,224,224,224,240,240,248,252,255,127,127,127,63,63,63,63,63,63,63,127,127,127,255,255,255,255,255,255,255,255,255,252,240,128,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,248,254,255,255,255,31,15,7,7,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,254,28,0,0,0,0,0,3,63,255,255,255,255,63,15,7,3,3,3,3,3,7,7,31,255,255,255,255,255,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,63,31,7,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,224,224,240,240,248,248,252,252,126,127,63,63,31,15,15,7,7,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,3,3,1,1,1,0,0,0,0,0,0,0,129,129,1,3,3,7,15,31,63,255,255,255,255,255,255,255,255,255,255,255,255,252,248,240,224,192,192,128,128,0,0,1,3,7,7,7,7,7,3,2,128,128,192,192,224,240,248,254,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,224,240,240,248,248,252,252,126,127,63,63,31,15,15,7,7,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,128,192,224,240,240,248,252,252,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,224,0,0,0,0,0,30,126,126,124,252,252,248,248,240,240,224,192,128,0,0,0,0,0,0,0,0,0,0,128,248,255,255,248,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,224,240,240,248,248,252,252,126,127,63,63,31,15,15,7,7,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,224,240,252,254,255,255,255,255,255,255,63,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,192,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,224,240,240,248,248,252,252,126,127,63,63,31,15,15,7,7,3,3,1,1,0,0,0,0,0,0,0,0,0,0,128,192,192,224,224,240,240,248,248,120,60,28,12,12,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,224,240,240,248,248,252,252,126,126,63,63,31,31,15,7,7,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,224,240,240,248,248,252,252,126,126,63,63,31,31,15,7,7,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,224,224,240,248,248,252,252,126,126,63,63,31,31,15,7,7,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,224,224,240,248,248,252,252,126,126,63,63,31,31,15,7,7,7,7,7,7,15,63,255,255,255,252,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,192,224,224,224,224,192,192,192,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
END ASM

fontdata:
ASM
  defb 0,0,0,0,0,0,0,0
  defb 0,8,8,8,8,0,8,0
  defb 80,80,80,0,0,0,0,0
  defb 80,80,248,80,248,80,80,0
  defb 32,120,160,112,40,240,32,0
  defb 192,200,16,32,64,152,24,0
  defb 64,160,64,168,144,152,96,0
  defb 16,32,64,0,0,0,0,0
  defb 16,32,64,64,64,32,16,0
  defb 64,32,16,16,16,32,64,0
  defb 32,168,112,32,112,168,32,0
  defb 0,32,32,248,32,32,0,0
  defb 0,0,0,0,0,32,32,64
  defb 0,0,0,120,0,0,0,0
  defb 0,0,0,0,0,96,96,0
  defb 0,0,8,16,32,64,128,0
  defb 112,136,152,168,200,136,112,0
  defb 32,96,160,32,32,32,248,0
  defb 112,136,8,16,96,128,248,0
  defb 112,136,8,48,8,136,112,0
  defb 16,48,80,144,248,16,16,0
  defb 248,128,224,16,8,16,224,0
  defb 48,64,128,240,136,136,112,0
  defb 248,136,16,32,32,32,32,0
  defb 112,136,136,112,136,136,112,0
  defb 112,136,136,120,8,16,96,0
  defb 0,0,32,0,0,32,0,0
  defb 0,0,32,0,0,32,32,64
  defb 24,48,96,192,96,48,24,0
  defb 0,0,248,0,248,0,0,0
  defb 192,96,48,24,48,96,192,0
  defb 112,136,8,16,32,0,32,0
  defb 112,136,8,104,168,168,112,0
  defb 32,80,136,136,248,136,136,0
  defb 240,72,72,112,72,72,240,0
  defb 48,72,128,128,128,72,48,0
  defb 224,80,72,72,72,80,224,0
  defb 248,128,128,240,128,128,248,0
  defb 248,128,128,240,128,128,128,0
  defb 112,136,128,184,136,136,112,0
  defb 136,136,136,248,136,136,136,0
  defb 112,32,32,32,32,32,112,0
  defb 56,16,16,16,144,144,96,0
  defb 136,144,160,192,160,144,136,0
  defb 128,128,128,128,128,128,248,0
  defb 136,216,168,168,136,136,136,0
  defb 136,200,200,168,152,152,136,0
  defb 112,136,136,136,136,136,112,0
  defb 240,136,136,240,128,128,128,0
  defb 112,136,136,136,168,144,104,0
  defb 240,136,136,240,160,144,136,0
  defb 112,136,128,112,8,136,112,0
  defb 248,32,32,32,32,32,32,0
  defb 136,136,136,136,136,136,112,0
  defb 136,136,136,136,80,80,32,0
  defb 136,136,136,168,168,216,136,0
  defb 136,136,80,32,80,136,136,0
  defb 136,136,136,112,32,32,32,0
  defb 248,8,16,32,64,128,248,0
  defb 112,64,64,64,64,64,112,0
  defb 0,0,128,64,32,16,8,0
  defb 112,16,16,16,16,16,112,0
  defb 32,80,136,0,0,0,0,0
  defb 0,0,0,0,0,0,248,0
  defb 64,32,16,0,0,0,0,0
  defb 0,0,112,8,120,136,120,0
  defb 128,128,176,200,136,200,176,0
  defb 0,0,112,136,128,136,112,0
  defb 8,8,104,152,136,152,104,0
  defb 0,0,112,136,248,128,112,0
  defb 16,40,32,248,32,32,32,0
  defb 0,0,104,152,152,104,8,112
  defb 128,128,240,136,136,136,136,0
  defb 32,0,96,32,32,32,112,0
  defb 16,0,48,16,16,16,144,96
  defb 64,64,72,80,96,80,72,0
  defb 96,32,32,32,32,32,112,0
  defb 0,0,208,168,168,168,168,0
  defb 0,0,176,200,136,136,136,0
  defb 0,0,112,136,136,136,112,0
  defb 0,0,176,200,200,176,128,128
  defb 0,0,104,152,152,104,8,8
  defb 0,0,176,200,128,128,128,0
  defb 0,0,120,128,240,8,240,0
  defb 64,64,240,64,64,72,48,0
  defb 0,0,144,144,144,144,104,0
  defb 0,0,136,136,136,80,32,0
  defb 0,0,136,168,168,168,80,0
  defb 0,0,136,80,32,80,136,0
  defb 0,0,136,136,152,104,8,112
  defb 0,0,248,16,32,64,248,0
  defb 24,32,32,64,32,32,24,0
  defb 32,32,32,0,32,32,32,0
  defb 192,32,32,16,32,32,192,0
  defb 64,168,16,0,0,0,0,0
  defb 0,0,32,80,248,0,0,0
END ASM

SUB putChars(x as uByte,y as uByte, width as uByte, height as uByte, dataAddress as uInteger)
' Copyleft Britlion. Feel free to use as you will. Please attribute me if you use this, however!

Asm
    BLPutChar:
             LD      a,(IX+5)
             ;AND     31
             ld      l,a
             ld      a,(IX+7) ; Y value
             ld      d,a
             AND     24
             add     a,64 ; 256 byte "page" for screen - 256*64=16384. Change this if you are working with a screen address elsewhere, such as a buffer.
             ld      h,a
             ld      a,d
             AND     7
             rrca
             rrca
             rrca
             OR      l
             ld      l,a

    PUSH HL ; save our address

    LD E,(IX+12) ; data address
    LD D,(IX+13)
    LD B,(IX+9) ; width
    PUSH BC ; save our column count

    BLPutCharColumnLoop:

    LD B,(IX+11) ; height

    BLPutCharInColumnLoop:
   
    ; gets screen address in HL, and bytes address in DE. Copies the 8 bytes to the screen
    ld a,(DE) ; First Row
    LD (HL),a
    
    INC DE
    INC H
    ld a,(DE)
    LD (HL),a ; second Row
    
    INC DE
    INC H
    ld a,(DE)
    LD (HL),a ; Third Row
    
    INC DE
    INC H
    ld a,(DE)
    LD (HL),a ; Fourth Row
    
    INC DE
    INC H
    ld a,(DE)
    LD (HL),a ; Fifth Row
    
    INC DE
    INC H
    ld a,(DE)
    LD (HL),a ; Sixth Row
    
    INC DE
    INC H
    ld a,(DE)
    LD (HL),a ; Seventh Row
    
    INC DE
    INC H
    ld a,(DE)
    LD (HL),a ; Eigth Row
    
    INC DE ; Move to next data item.
    
    DEC B
    JR Z,BLPutCharNextColumn
    ;The following code calculates the address of the next line down below current HL address.
    PUSH DE ; save DE
             ld   a,l   
             and  224   
             cp   224
             jp   z,BLPutCharNextThird

    BLPutCharSameThird:
             ld   de,-1760
             ;and  a         
             add  hl,de      
             POP DE ; get our data point back.
             jp BLPutCharInColumnLoop

    BLPutCharNextThird:
             ld   de,32      
             ;and  a
             add  hl,de   
             POP DE ; get our data point back.
    JP BLPutCharInColumnLoop

    BLPutCharNextColumn:
    POP BC
    POP HL
    DEC B
    JP Z, BLPutCharsEnd

    INC L   ; Note this would normally be Increase HL - but block painting should never need to increase H, since that would wrap around.
    PUSH HL
    PUSH BC
    JP BLPutCharColumnLoop


BLPutCharsEnd:

End Asm
END SUB

SUB paint (x as uByte,y as uByte, width as uByte, height as uByte, attribute as ubyte)
REM Copyleft Britlion. Feel free to use as you will. Please attribute me if you use this, however!

Asm
    ld      a,(IX+7)   ;ypos
    rrca
    rrca
    rrca               ; Multiply by 32
    ld      l,a        ; Pass to L
    and     3          ; Mask with 00000011
    add     a,88       ; 88 * 256 = 22528 - start of attributes. Change this if you are working with a buffer or somesuch.
    ld      h,a        ; Put it in the High Byte
    ld      a,l        ; We get y value *32
    and     224        ; Mask with 11100000
    ld      l,a        ; Put it in L
    ld      a,(IX+5)   ; xpos 
    add     a,l        ; Add it to the Low byte
    ld      l,a        ; Put it back in L, and we're done. HL=Address.

    push HL            ; save address
    LD A, (IX+13)      ; attribute
    LD DE,32
    LD c,(IX+11)       ; height

    BLPaintHeightLoop: 
    LD b,(IX+9)        ; width

    BLPaintWidthLoop:
    LD (HL),a          ; paint a character
    INC L              ; Move to the right (Note that we only would have to inc H if we are crossing from the right edge to the left, and we shouldn't be needing to do that)
    DJNZ BLPaintWidthLoop

    BLPaintWidthExitLoop:
    POP HL             ; recover our left edge
    DEC C
    JR Z, BLPaintHeightExitLoop

    ADD HL,DE          ; move 32 down
    PUSH HL            ; save it again
    JP BLPaintHeightLoop

    BLPaintHeightExitLoop:    
end asm
END SUB
